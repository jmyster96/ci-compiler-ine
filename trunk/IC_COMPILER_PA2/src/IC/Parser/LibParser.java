
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 12 08:09:24 IST 2010
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 12 08:09:24 IST 2010
  */
public class LibParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LibParser() {super();}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\011" +
    "\000\002\006\003\000\002\006\003\000\002\007\004\000" +
    "\002\007\006\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\054\005\001\002\000\004\002\041\001" +
    "\002\000\004\037\006\001\002\000\004\010\007\001\002" +
    "\000\004\045\010\001\002\000\012\041\020\042\017\043" +
    "\021\044\015\001\002\000\006\011\uffff\045\uffff\001\002" +
    "\000\006\011\014\045\010\001\002\000\006\011\ufffe\045" +
    "\ufffe\001\002\000\004\002\001\001\002\000\006\006\ufff5" +
    "\036\ufff5\001\002\000\006\006\036\036\ufffa\001\002\000" +
    "\006\006\ufff6\036\ufff6\001\002\000\004\036\ufffb\001\002" +
    "\000\006\006\ufff7\036\ufff7\001\002\000\004\036\023\001" +
    "\002\000\004\004\024\001\002\000\012\005\027\042\017" +
    "\043\021\044\015\001\002\000\006\006\036\036\040\001" +
    "\002\000\006\005\032\033\031\001\002\000\004\034\030" +
    "\001\002\000\006\011\ufffd\045\ufffd\001\002\000\010\042" +
    "\017\043\021\044\015\001\002\000\004\034\033\001\002" +
    "\000\006\011\ufffc\045\ufffc\001\002\000\006\006\036\036" +
    "\035\001\002\000\006\005\ufff8\033\ufff8\001\002\000\004" +
    "\007\037\001\002\000\006\006\ufff4\036\ufff4\001\002\000" +
    "\006\005\ufff9\033\ufff9\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\006\005\015\006\021\001\001\000\002\001" +
    "\001\000\004\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Lexer lexer;
	
	public LibParser(Lexer lexer)
	{
		super(lexer);
		
		this.lexer = lexer;
	}
	
	//////////////////////////////////////////////////////
	// Allows us to throw our own SyntaxError exceptions
	//////////////////////////////////////////////////////
	
	public void unrecovered_syntax_error(Symbol current_token) throws SyntaxError
	{
		throw new SyntaxError(current_token.left, (String)current_token.value);
	}
	
	public void syntax_error(Symbol current_token) {}
	
	//////////////////////////////////////////////////////////
	// Allows us to get the line number of the current token
	//////////////////////////////////////////////////////////
	
	public int getLine()
	{
		return lexer.getLineNumber();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LibParser$actions {
  private final LibParser parser;

  /** Constructor */
  CUP$LibParser$actions(LibParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LibParser$do_action(
    int                        CUP$LibParser$act_num,
    java_cup.runtime.lr_parser CUP$LibParser$parser,
    java.util.Stack            CUP$LibParser$stack,
    int                        CUP$LibParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibParser$result;

      /* select the action based on the action number */
      switch (CUP$LibParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= Type LB RB 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		
		type.incrementDimension();
		RESULT = type;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		RESULT = new PrimitiveType(parser.getLine(), DataTypes.STRING);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		RESULT = new PrimitiveType(parser.getLine(), DataTypes.BOOLEAN);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		RESULT = new PrimitiveType(parser.getLine(), DataTypes.INT);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Formals ::= Formals COMMA Type ID 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		f.add(new Formal(type, id));
		RESULT = f;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Formals ::= Type ID 
            {
              List<Formal> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		List<Formal> list = new ArrayList<Formal>();
		list.add(new Formal(type, id));
		RESULT = list;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ReturnType ::= Type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		RESULT = type;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("ReturnType",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ReturnType ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		RESULT = new PrimitiveType(parser.getLine(), DataTypes.VOID);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("ReturnType",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LibMethod ::= STATIC ReturnType ID LP Formals RP SEMI 
            {
              LibraryMethod RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		
		RESULT = new LibraryMethod(type, id, formals);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("LibMethod",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-6)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LibMethod ::= STATIC ReturnType ID LP RP SEMI 
            {
              LibraryMethod RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).value;
		
		RESULT = new LibraryMethod(type, id, new ArrayList<Formal>());
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("LibMethod",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LibMethods ::= LibMethods LibMethod 
            {
              List<Method> RESULT =null;
		int lmsleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int lmsright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> lms = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int lmleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		LibraryMethod lm = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		lms.add(lm);
		RESULT = lms;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("LibMethods",1, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LibMethods ::= LibMethod 
            {
              List<Method> RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		LibraryMethod lm = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		
		List<Method> list = new ArrayList<Method>();
		list.add(lm);
		RESULT = list;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("LibMethods",1, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= LibIC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		ICClass start_val = (ICClass)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		RESULT = start_val;
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibParser$parser.done_parsing();
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // LibIC ::= CLASS CLASS_ID LCBR LibMethods RCBR 
            {
              ICClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).value;
		int lmleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> lm = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		
		if (id.compareTo("Library") != 0)
			throw new SemanticError(parser.getLine(), "Library class must be named \"Library\"");
		
		RESULT = new ICClass(parser.getLine(), id, new ArrayList<Field>(), lm);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("LibIC",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

