package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;


parser code
{:
	//////////////////////////////////////////////////////
	// Allows us to throw our own SyntaxError exceptions
	//////////////////////////////////////////////////////
	
	public void unrecovered_syntax_error(Symbol current_token) throws SyntaxError
	{
		throw new SyntaxError(current_token.left, ((current_token.value == null) ? "" : (String)current_token.value));
	}
	
	public void syntax_error(Symbol current_token) {}
:};

//////////////////////////////////////////////////
// Non-terminals
//////////////////////////////////////////////////

non terminal Program Program;
non terminal ICClass ICClass;
non terminal List<ICClass> ICClasses;
non terminal FieldOrMethod FieldOrMethod;
non terminal List<Field> Fields;
non terminal List<String> IDs;
non terminal Method Method; 
non terminal List<Formal> Formals;
non terminal Type Type;
non terminal Statement Statement;
non terminal List<Statement> StatementsBlock;
non terminal Location Location;
non terminal Expression Expression;
non terminal List<Expression> ExpressionList;
non terminal Call Call;
non terminal StaticCall StaticCall;
non terminal VirtualCall VirtualCall;
non terminal BinaryOp BinaryOp;
non terminal UnaryOp UnaryOp;
non terminal Literal Literal;

//////////////////////////////////////////////////
// Terminals
//////////////////////////////////////////////////

terminal LP,RP,LB,RB,LCBR,RCBR;
terminal ASSIGN,DIVIDE,MOD,MULTIPLY,PLUS,MINUS,UMINUS;
terminal EQUAL,NEQUAL,GT,GTE,LT,LTE;
terminal LAND,LNEG,LOR;
terminal DOT,COMMA,SEMI;
terminal Integer INTEGER;
terminal String ID;
terminal String CLASS_ID;
terminal String QUOTE;
terminal VOID,BOOLEAN,INT,STRING,STATIC;
terminal IF,ELSE,WHILE,CONTINUE,BREAK,RETURN;
terminal CLASS;
terminal EXTENDS,THIS,NEW;
terminal FALSE,TRUE,NULL;
terminal LENGTH;

//////////////////////////////////////////////////
// Precedence
//////////////////////////////////////////////////

precedence right ASSIGN;
precedence left LT, LTE, GT, GTE;
precedence left LOR;
precedence left LAND;
precedence left ID;
precedence left EQUAL, NEQUAL;
precedence left PLUS,MINUS;
precedence left MOD,MULTIPLY,DIVIDE;
precedence left UMINUS, LNEG;
precedence left LB, RB, LP, RP, DOT;
precedence left IF, ELSE;

//////////////////////////////////////////////////
// Syntactic rules
//////////////////////////////////////////////////

Program ::=
	ICClasses:cl
	{:
		RESULT = new Program(cl);
	:};
	
ICClasses ::=
	ICClass:c
	{:
		List<ICClass> cl = new ArrayList<ICClass>();
		cl.add(c);
		RESULT = cl;
	:} |
	ICClasses:cl ICClass:c
	{:
		cl.add(c);
		RESULT = cl;
	:};  

ICClass ::=
	CLASS CLASS_ID:c LCBR RCBR
	{:
		RESULT = new ICClass(cleft, c, new ArrayList<Field>(), new ArrayList<Method>());
	:} |
 	CLASS CLASS_ID:c EXTENDS CLASS_ID:e LCBR RCBR
 	{:
 		RESULT = new ICClass(cleft, c, e, new ArrayList<Field>(), new ArrayList<Method>());
 	:} |
	CLASS CLASS_ID:c LCBR FieldOrMethod:members RCBR
	{:
		RESULT = new ICClass(cleft, c, members.getFields(), members.getMethods());	
	:} |
	CLASS CLASS_ID:c EXTENDS CLASS_ID:e LCBR FieldOrMethod:members RCBR
	{:
		RESULT = new ICClass(cleft, c, e, members.getFields(), members.getMethods());
	:};
	
FieldOrMethod ::=
	Fields:fields
	{:
		FieldOrMethod fom = new FieldOrMethod(fieldsleft);
		fom.addFields(fields);
		RESULT = fom;
	:} |
	Method:method
	{:
		FieldOrMethod fom = new FieldOrMethod(methodleft);
		fom.addMethod(method);
		RESULT = fom;
	:} |
	FieldOrMethod:members Fields:fields
	{:
		members.addFields(fields);
		RESULT = members;
	:} |
	FieldOrMethod:members Method:method 
	{:
		members.addMethod(method);
		RESULT = members;
	:};

Fields ::=
	Type:type IDs:ids SEMI
	{:
		List<Field> list = new ArrayList<Field>();
		
		for (String name : ids)
		{
			list.add(new Field(type, name));
		}
		
		RESULT = list;
	:};

IDs ::=
	ID:id
	{:
		List<String> list = new ArrayList<String>();
		list.add(id);
		RESULT = list;
	:} |
	IDs:ids COMMA ID:id
	{:
		ids.add(id);
		RESULT = ids;
	:};

Method ::=
	Type:type ID:id LP Formals:f RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new VirtualMethod(type, id, f, sb);
	:} |
	STATIC Type:type ID:id LP Formals:f RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new StaticMethod(type, id, f, sb);
	:} |
	Type:type ID:id LP RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new VirtualMethod(type, id, new ArrayList<Formal>(), sb);
	:} |
	STATIC Type:type ID:id LP RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new StaticMethod(type, id, new ArrayList<Formal>(), sb);
	:} |
	VOID:v ID:id LP Formals:f RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new VirtualMethod(new PrimitiveType(idleft, DataTypes.VOID), id, f, sb);
	:} |
	STATIC VOID:v ID:id LP Formals:f RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new StaticMethod(new PrimitiveType(idleft, DataTypes.VOID), id, f, sb);
	:} |
	VOID:v ID:id LP RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new VirtualMethod(new PrimitiveType(idleft, DataTypes.VOID), id, new ArrayList<Formal>(), sb);
	:} |
	STATIC VOID:v ID:id LP RP LCBR StatementsBlock:sb RCBR
	{:
		RESULT = new StaticMethod(new PrimitiveType(idleft, DataTypes.VOID), id, new ArrayList<Formal>(), sb);
	:};

Formals ::=
	Formals:f COMMA Type:type ID:id
	{:
		f.add(new Formal(type, id));
		RESULT = f;
	:} | 
	Type:type ID:id
	{:
		List<Formal> list = new ArrayList<Formal>();
		list.add(new Formal(type, id));
		RESULT = list;
	:};

Type ::=
	INT:i
	{:
		RESULT = new PrimitiveType(ileft, DataTypes.INT);
	:} |
	BOOLEAN:b
	{:
		RESULT = new PrimitiveType(bleft, DataTypes.BOOLEAN);
	:} |
	STRING:s
	{:
		RESULT = new PrimitiveType(sleft, DataTypes.STRING);
	:} |
	CLASS_ID:id
	{:
		RESULT = new UserType(idleft, id);
	:} |
	Type:type LB RB
	{:
		type.incrementDimension();
		RESULT = type;
	:};
	
StatementsBlock ::=
	StatementsBlock:sb Statement:s
	{:
		sb.add(s);
		RESULT = sb;
	:} |
	// Empty deriviation...
	{:
	 	RESULT = new ArrayList<Statement>();
	:};

Statement ::=
	Location:loc ASSIGN Expression:exp SEMI
	{:
		RESULT = new Assignment(loc, exp);
	:} |
	Call:c SEMI
	{:
		RESULT = new CallStatement(c);
	:} |
	RETURN:r SEMI
	{:
		RESULT = new Return(rleft);
	:} |
	RETURN Expression:exp SEMI
	{:
		RESULT = new Return(expleft, exp);
	:} |
	IF LP Expression:exp RP Statement:s1 ELSE Statement:s2
	{:
		RESULT = new If(exp, s1, s2);
	:} |
	IF LP Expression:exp RP Statement:s
	{:
		RESULT = new If(exp, s);
	:} |
	WHILE LP Expression:exp RP Statement:s
	{:
		RESULT = new While(exp, s);
	:} |
	BREAK:b SEMI
	{:
		RESULT = new Break(bleft);
	:} |
	CONTINUE:c SEMI
	{:
		RESULT = new Continue(cleft);
	:} |
	LCBR:l StatementsBlock:sb RCBR
	{:
		RESULT = new StatementsBlock(lleft, sb);
	:} |
	Type:type ID:id SEMI
	{:
		RESULT = new LocalVariable(type, id);
	:} |
	Type:type ID:id ASSIGN Expression:exp SEMI
	{:
		RESULT = new LocalVariable(type, id, exp);
	:};
	
Expression ::=
	Location:loc
	{:
		RESULT = loc;
	:} |
	Call:c
	{:
		RESULT = c;
	:} |
	THIS:t
	{:
		RESULT = new This(tleft);
	:} |
	NEW CLASS_ID:id LP RP
	{:
		RESULT = new NewClass(idleft, id);
	:} |
	NEW Type:type LB Expression:exp RB
	{:
		RESULT = new NewArray(type, exp);
	:} |
	Expression:exp DOT LENGTH
	{:
		RESULT = new Length(exp);
	:} |
	BinaryOp:bin
	{:
		RESULT = bin;
	:} |
	UnaryOp:u
	{:
		RESULT = u;
	:} |
	Literal:l
	{:
		RESULT = l;
	:} |
	LP Expression:exp RP
	{:
		RESULT = exp;
	:};

Call ::=
	StaticCall:sc
	{:
		RESULT = sc;	
	:} |
	VirtualCall:vc
	{:
		RESULT = vc;
	:};

StaticCall ::=
	CLASS_ID:cid DOT ID:id LP RP
	{:
		RESULT = new StaticCall(cidleft, cid, id, new ArrayList<Expression>()); 
	:} |
	CLASS_ID:cid DOT ID:id LP ExpressionList:el RP
	{:
		RESULT = new StaticCall(cidleft, cid, id, el); 
	:};

VirtualCall ::=
	ID:id LP RP
	{:
		RESULT = new VirtualCall(idleft, id, new ArrayList<Expression>()); 
	:} |
	Expression:exp DOT ID:id LP RP
	{:
		RESULT = new VirtualCall(expleft, exp, id, new ArrayList<Expression>()); 
	:} |
	ID:id LP ExpressionList:el RP
	{:
		RESULT = new VirtualCall(idleft, id, el); 
	:} |
	Expression:exp DOT ID:id LP ExpressionList:el RP
	{:
		RESULT = new VirtualCall(expleft, exp, id, el); 
	:};
 
ExpressionList ::=
	Expression:exp
	{:
		List<Expression> list = new ArrayList<Expression>();
		list.add(exp);
		RESULT = list;
	:} |
	ExpressionList:el COMMA Expression:exp
	{:
		el.add(exp);
		RESULT = el;
	:};

Location ::=
	ID:id
	{:
		RESULT = new VariableLocation(idleft, id);
	:} |
	Expression:exp DOT ID:id
	{:
		RESULT = new VariableLocation(expleft, exp, id);
	:} |
	Expression:exp1 LB Expression:exp2 RB
	{:
		RESULT = new ArrayLocation(exp1, exp2);
	:};

BinaryOp ::=
	Expression:exp1 PLUS Expression:exp2
	{:
		RESULT = new MathBinaryOp(exp1, BinaryOps.PLUS, exp2);
	:} |
	Expression:exp1 MINUS Expression:exp2
	{:
		RESULT = new MathBinaryOp(exp1, BinaryOps.MINUS, exp2);
	:} |
	Expression:exp1 MULTIPLY Expression:exp2
	{:
		RESULT = new MathBinaryOp(exp1, BinaryOps.MULTIPLY, exp2);
	:} |
	Expression:exp1 DIVIDE Expression:exp2
	{:
		RESULT = new MathBinaryOp(exp1, BinaryOps.DIVIDE, exp2);
	:} |
	Expression:exp1 MOD Expression:exp2
	{:
		RESULT = new MathBinaryOp(exp1, BinaryOps.MOD, exp2);
	:} |
	Expression:exp1 LAND Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.LAND, exp2);
	:} |
	Expression:exp1 LOR Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.LOR, exp2);
	:} |
	Expression:exp1 LT Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.LT, exp2);
	:} |
	Expression:exp1 LTE Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.LTE, exp2);
	:} |
	Expression:exp1 GT Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.GT, exp2);
	:} |
	Expression:exp1 GTE Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.GTE, exp2);
	:} |
	Expression:exp1 EQUAL Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.EQUAL, exp2);
	:} |
	Expression:exp1 NEQUAL Expression:exp2
	{:
		RESULT = new LogicalBinaryOp(exp1, BinaryOps.NEQUAL, exp2);
	:};
	
UnaryOp ::=
	MINUS Expression:exp
	{:
		RESULT = new MathUnaryOp(UnaryOps.UMINUS, exp);
	:} %prec UMINUS	|
	LNEG Expression:exp
	{:
		RESULT = new LogicalUnaryOp(UnaryOps.LNEG, exp);
	:};
	
Literal ::=
	INTEGER:i
	{:
		RESULT = new Literal(ileft, LiteralTypes.INTEGER, i);
	:} |
	QUOTE:s
	{:
		RESULT = new Literal(sleft, LiteralTypes.STRING, s);
	:} |
	TRUE:t
	{:
		RESULT = new Literal(tleft, LiteralTypes.TRUE);
	:} |
	FALSE:f
	{:
		RESULT = new Literal(fleft, LiteralTypes.FALSE);
	:} |
	NULL:n
	{:
		RESULT = new Literal(nleft, LiteralTypes.NULL);
	:};